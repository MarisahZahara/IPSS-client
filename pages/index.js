import Head from 'next/head'
import { Card, Col, Row, Button, Form, Input, Image, Space, message, Modal } from "antd"
import { LockOutlined, MailOutlined, CheckOutlined } from '@ant-design/icons';
import { useRouter } from "next/router";
import { login, otpLogin } from "./api/login"
import { useState } from "react";
import Cookies from "js-cookie";
import dynamic from "next/dynamic";
import { isEmpty } from 'lodash'
import cookies from "next-cookies";
import authorization from "../middlewares/authorization";
import { unauthPage } from "../middlewares/authorizationPage";

const OtpInputWithNoSSR = dynamic(() => import("../component/otp-input"), {
  ssr: false,
});

export async function getServerSideProps(ctx) {
  const { token } = cookies(ctx);
  const decode = await authorization(token);
  if (decode) {
    await unauthPage(ctx);
    return {
      props: {},
    };
  } else {
    return {
      props: {},
    };
  }
}

export default function Login() {
  const router = useRouter();

  const [Loading, setLoading] = useState(false)
  const [showModalOTP, setShowModalOTP] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [OTP, setOTP] = useState("");

  const ShowHideModalOTP = () => {
    setShowModalOTP(!showModalOTP);
  };

  const getOTP = (params) => {
    const otpValue = params;
    setOTP(otpValue);
  };

  const handleResendOtp = async () => {
    try {
      setLoading(true);
      const body = {
        email: email,
        password: password
      };
      const reqResendOtp = await login(body);
      if (reqResendOtp.status === 200 && !isEmpty(reqResendOtp.data.token)) {
        Cookies.set("token", reqResendOtp.data.token);
        message.success(
          "Login Berhasil!"
        );
        setTimeout(() => {
          router.push("/home");
        }, 2000)
        setLoading(false)
      } else if (reqResendOtp.data.message === "OTP generated!") {
        setTimeout(() => {
          setLoading(false);
          message.info("Please input the OTP that we send to your email", 4);
        }, 500);
        // setTimeout(() => {
        //   ShowHideModalOTP();
        // }, 1000);
      }
    } catch (error) {
      message.error(
        error.response.data.message
      )
      setLoading(false)
    } finally {
      setLoading(false)
    }
  };

  const handleOtpLogin = async () => {
    try {
      setLoading(true);
      const body = {
        OTP: OTP,
      };
      const reqOtpLogin = await otpLogin(body, email);
      if (reqOtpLogin.status === 200 && !isEmpty(reqOtpLogin.data.token)) {
        Cookies.set("token", reqOtpLogin.data.token);
        message.success(
          "Login Berhasil!"
        );
        setTimeout(() => {
          router.push("/home");
        }, 2000)
        setShowModalOTP(false);
        setLoading(false)
      } else {
        setTimeout(async () => {
          await message.error("OTP Is Invalid");
        }, 1000);
        setLoading(false)
      }
    } catch (error) {
      message.error(
        error.response.data.message
      )
      setLoading(false)
    } finally {
      setLoading(false)
    }
  };

  const onLogin = async (values) => {
    try {
      setLoading(true)
      const body = {
        email: values.email,
        password: values.password
      }
      const response = await login(body);
      if (response.status === 200 && !isEmpty(response.data.token)) {
        Cookies.set("token", response.data.token);
        message.success(
          "Login Berhasil!"
        );
        setTimeout(() => {
          router.push("/home");
        }, 2000)
        setLoading(false)
      } else if (response.data.message === "OTP generated!") {
        setEmail(values.email)
        setPassword(values.password)
        setTimeout(() => {
          setLoading(false);
          message.info("Please input the OTP that we send to your email", 4);
        }, 500);
        setTimeout(() => {
          ShowHideModalOTP();
        }, 1000);
      }
    } catch (error) {
      message.error(
        error.response.data.message
      )
      setLoading(false)
    } finally {
      setLoading(false)
    }
  }

  return (
    <>
      <Head>
        <title>Ipsos Application</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        className="otp-modal"
        visible={showModalOTP}
        onOk={handleOtpLogin}
        onCancel={ShowHideModalOTP}
        confirmLoading={Loading}
        cancelButtonProps={{ style: { display: "none" } }}
        okButtonProps={{ style: { textAlign: "center", marginLeft: 20 } }}
        okText={
          <div
            style={{
              display: "flex",
              flexDirection: "row",
              justifyContent: "center",
              textAlign: "center",
            }}
          >
            <span style={{ marginLeft: 10 }}>Verify</span>
            <CheckOutlined style={{ fontSize: 15, marginLeft: 6, marginTop: 3 }} />
          </div>
        }
        centered={true}
        destroyOnClose={true}
        maskClosable={false}
      >
        <OtpInputWithNoSSR getOTP={getOTP} resendOTP={handleResendOtp} userEmail={email} />
      </Modal>
      <Row justify="center" align="middle" className="login row">
        <Col span={6}>
          <Card className='login_card'>
            <div className="login_logo-image">
              <Image src="/images/logo-ipsos.png" preview={false} align="center"/>
            </div>
            <Form
              name="formLogin"
              className="login-form"
              initialValues={{
                remember: true,
              }}
              onFinish={onLogin}
            >
              <Form.Item
                name="email"
                rules={[
                  {
                    required: true,
                    message: 'Please input your Email!',
                  },
                ]}
              >
                <Input
                  prefix={<MailOutlined className="site-form-item-icon" />}
                  placeholder="Email"
                />
              </Form.Item>
              <Form.Item
                name="password"
                rules={[
                  {
                    required: true,
                    message: 'Please input your Password!',
                  },
                ]}
              >
                <Input.Password
                  prefix={<LockOutlined className="site-form-item-icon" />}
                  type="password"
                  placeholder="Password"
                />
              </Form.Item>
              {/* <Form.Item className='login_forgot-psw'>
                <a className="login-form-forgot" href="">
                  Forgot password
                </a>
              </Form.Item> */}

              <Form.Item className='login_button-login'>
                <Button type="primary" htmlType="submit" className="login-form-button" size='large' loading={Loading}>
                  Login
                </Button>
              </Form.Item>
            </Form>
          </Card>
        </Col>
      </Row>
    </>
  )
}

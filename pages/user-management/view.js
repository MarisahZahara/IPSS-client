import { Card, Breadcrumb, Button, Form, Input, Select, DatePicker } from 'antd';
import Head from 'next/head'
import LayoutBase from "../../layout/base";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { getEmployeeID, getRoles } from "../api/user-management"
import Cookies from "js-cookie";
import { map } from 'lodash';
import { authPage } from '../../middlewares/authorizationPage'
import authorization from '../../middlewares/authorization'

export async function getServerSideProps(ctx) {
  try {
    const { token } = await authPage(ctx);
    const decode = await authorization(token);
    if (decode) {
      return {
        props: {
          dataToken: decode,
        },
      };
    } else {
      return ctx.res
        .writeHead(302, {
          Location: "/",
        })
        .end();
    }
  } catch (error) {
    return ctx.res
      .writeHead(302, {
        Location: "/",
      })
      .end();
  }
}

export default function ViewUser(dataToken) {
  const router = useRouter();
  const { id } = router.query
  const dataUser = dataToken.dataToken

  const [form] = Form.useForm()
  const [dataRoles, setDataRoles] = useState([])

  useEffect( () => {
    onDataView()
    typeRoles()
  }, [])

  const layout = {
    labelCol: {
      span: 8,
    },
    wrapperCol: {
      span: 16,
    },
  }

  const typeRoles = async () => {
    try {
      const token = Cookies.get("token")
      const response = await getRoles(token);
      if (response.status === 200) {
        setDataRoles(response.data)
      }
    } catch (error) {
      message.error(
        error.response.data.message
      )
    }
  }

  const onDataView = async () => {
    try {
      const token = Cookies.get("token")
      const response = await getEmployeeID(id, token);
      if (response.status === 200) {
        form.setFieldsValue({
          firstName: response.data.firstName,
          lastName: response.data.lastName,
          email: response.data.email,
          position: {value: response.data.role.id, name: response.data.role.user_role},
          gender: response.data.gender,
          phone: response.data.phone,
        })
      }
    } catch (error) {
      message.error(
        error.response.data.message
      )
    }
  }

  const onUserManagement = () => {
    router.push("/user-management");
  }

  return (
    <LayoutBase dataToken={dataToken}>
      <Head>
        <title>Ipsos Application</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Breadcrumb className="breadcrumb">
        {
          dataUser.role === "admin" ? <Breadcrumb.Item>
            <span onClick={onUserManagement}>User Management</span>
          </Breadcrumb.Item> : ""
        }
        <Breadcrumb.Item>View User</Breadcrumb.Item>
      </Breadcrumb>
        <Card
          title="View User"
        >
          <Form form={form} {...layout} name="nest-messages" autoComplete="off" disabled={true}>
            <Form.Item
              name="firstName"
              label="First Name"
              rules={[
                {
                  type: "firstName",
                },
              ]}
            >
              <Input placeholder="Input First Name here"/>
            </Form.Item>
            <Form.Item
              name="lastName"
              label="Last Name"
              rules={[
                {
                  type: "lastName",
                },
              ]}
            >
              <Input placeholder="Input Last Name here"/>
            </Form.Item>
            <Form.Item
              name="email"
              label="Email"
              rules={[
                {
                  type: 'email',
                  message: 'The input is not valid E-mail!',
                },
                {
                  required: true,
                  message: 'Please input your E-mail!',
                },
              ]}
            >
              <Input placeholder="Input Email here"/>
            </Form.Item>
            <Form.Item
              name="position"
              label="Position"
              rules={[
                {
                  type: "position",
                },
              ]}
            >
              <Select placeholder="Select Position">
                {
                  map(dataRoles, (data, idx) => {
                    return (
                      <Select.Option key={idx} value={data.id}>{data.user_role.toUpperCase()}</Select.Option>
                    )
                  })
                }
              </Select>
            </Form.Item>
            <Form.Item
              name="gender"
              label="Gender"
              rules={[
                {
                  type: "gender",
                },
              ]}
            >
              <Select placeholder="Select Gender">
                <Select.Option value="male">Male</Select.Option>
                <Select.Option value="female">Female</Select.Option>
              </Select>
            </Form.Item>
            <Form.Item
              name="phone"
              label="Phone"
              rules={[
                {
                  type: "phone",
                },
              ]}
            >
              <Input placeholder="Input Phone here"/>
            </Form.Item>
          </Form>
        </Card>
    </LayoutBase>
  );
}
